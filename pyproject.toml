[project]
name = "cell-cocluster"
version = "0.1.0"
description = "Cell co-clustering analysis toolkit"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    { name = "Zihan", email = "wzh4464@gmail.com" }
]
license = { text = "MIT" }
dependencies = [
    "jupytext>=1.17.0",
    "numpy==1.26.4",
    "pandas>=2.2.3",
    "scipy>=1.15.2",
    "scikit-learn>=1.6.1",
    "matplotlib>=3.10.1",
    "nibabel>=5.3.2",
    "open3d",
    "pyshtools>=4.13.1",
    "dash>=3.0.3",
    "plotly>=6.0.1",
    "build>=1.2.2.post1",
    "ipykernel>=6.29.5",
    "click>=8.0.0",
    "seaborn>=0.13.2",
    "dask>=2025.4.1",
    "clustering-geodata-cubes>=0.8.0",
    "scikit-image>=0.25.2",
    "pyyaml>=6.0",
    "tqdm>=4.66.0",
    "pillow>=10.0.0",
]

classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[project.optional-dependencies]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "coverage>=7.4.0",
    "factory-boy>=3.3.0",
]
dev = [
    "black>=24.0.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

[project.scripts]
kinematic-features = "tasks.kinematic_features:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.hatch.build.targets.wheel]
packages = ["src", "tasks"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src",
    "--cov=tasks", 
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--strict-markers",
    "-v"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src", "tasks"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["E501"]

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
